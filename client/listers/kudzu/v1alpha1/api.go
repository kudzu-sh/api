// Copyright Â© 2018 the Kudzu contributors.
// Licensed under the Apache License, Version 2.0; see the NOTICE file.

// Code generated by lister. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kudzu.sh/api/kudzu/v1alpha1"
)

// APILister helps list APIs.
type APILister interface {
	// List lists all APIs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.API, err error)
	// Get retrieves the API from the index for a given name.
	Get(name string) (*v1alpha1.API, error)
	APIListerExpansion
}

// aPILister implements the APILister interface.
type aPILister struct {
	indexer cache.Indexer
}

// NewAPILister returns a new APILister.
func NewAPILister(indexer cache.Indexer) APILister {
	return &aPILister{indexer: indexer}
}

// List lists all APIs in the indexer.
func (s *aPILister) List(selector labels.Selector) (ret []*v1alpha1.API, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.API))
	})
	return ret, err
}

// Get retrieves the API from the index for a given name.
func (s *aPILister) Get(name string) (*v1alpha1.API, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("api"), name)
	}
	return obj.(*v1alpha1.API), nil
}
