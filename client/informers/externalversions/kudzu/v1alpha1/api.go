// Copyright Â© 2018 the Kudzu contributors.
// Licensed under the Apache License, Version 2.0; see the NOTICE file.

// Code generated by informer. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	client "kudzu.sh/api/client"
	internalinterfaces "kudzu.sh/api/client/informers/externalversions/internalinterfaces"
	v1alpha1 "kudzu.sh/api/client/listers/kudzu/v1alpha1"
	kudzuv1alpha1 "kudzu.sh/api/kudzu/v1alpha1"
)

// APIInformer provides access to a shared informer and lister for
// APIs.
type APIInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.APILister
}

type aPIInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIInformer constructs a new informer for API type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIInformer(client client.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIInformer constructs a new informer for API type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIInformer(client client.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KudzuV1alpha1().APIs().List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KudzuV1alpha1().APIs().Watch(options)
			},
		},
		&kudzuv1alpha1.API{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIInformer) defaultInformer(client client.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *aPIInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kudzuv1alpha1.API{}, f.defaultInformer)
}

func (f *aPIInformer) Lister() v1alpha1.APILister {
	return v1alpha1.NewAPILister(f.Informer().GetIndexer())
}
