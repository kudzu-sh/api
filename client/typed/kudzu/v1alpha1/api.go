// Copyright Â© 2018 the Kudzu contributors.
// Licensed under the Apache License, Version 2.0; see the NOTICE file.

// Code generated by client. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	scheme "kudzu.sh/api/client/scheme"
	v1alpha1 "kudzu.sh/api/kudzu/v1alpha1"
)

// APIsGetter has a method to return a APIInterface.
// A group's client should implement this interface.
type APIsGetter interface {
	APIs() APIInterface
}

// APIInterface has methods to work with API resources.
type APIInterface interface {
	Create(*v1alpha1.API) (*v1alpha1.API, error)
	Update(*v1alpha1.API) (*v1alpha1.API, error)
	UpdateStatus(*v1alpha1.API) (*v1alpha1.API, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.API, error)
	List(opts v1.ListOptions) (*v1alpha1.APIList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.API, err error)
	APIExpansion
}

// apis implements APIInterface
type apis struct {
	client rest.Interface
}

// newAPIs returns a APIs
func newAPIs(c *KudzuV1alpha1Client) *apis {
	return &apis{
		client: c.RESTClient(),
	}
}

// Get takes name of the aPI, and returns the corresponding aPI object, and an error if there is any.
func (c *apis) Get(name string, options v1.GetOptions) (result *v1alpha1.API, err error) {
	result = &v1alpha1.API{}
	err = c.client.Get().
		Resource("apis").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of APIs that match those selectors.
func (c *apis) List(opts v1.ListOptions) (result *v1alpha1.APIList, err error) {
	result = &v1alpha1.APIList{}
	err = c.client.Get().
		Resource("apis").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested apis.
func (c *apis) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("apis").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a aPI and creates it.  Returns the server's representation of the aPI, and an error, if there is any.
func (c *apis) Create(aPI *v1alpha1.API) (result *v1alpha1.API, err error) {
	result = &v1alpha1.API{}
	err = c.client.Post().
		Resource("apis").
		Body(aPI).
		Do().
		Into(result)
	return
}

// Update takes the representation of a aPI and updates it. Returns the server's representation of the aPI, and an error, if there is any.
func (c *apis) Update(aPI *v1alpha1.API) (result *v1alpha1.API, err error) {
	result = &v1alpha1.API{}
	err = c.client.Put().
		Resource("apis").
		Name(aPI.Name).
		Body(aPI).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *apis) UpdateStatus(aPI *v1alpha1.API) (result *v1alpha1.API, err error) {
	result = &v1alpha1.API{}
	err = c.client.Put().
		Resource("apis").
		Name(aPI.Name).
		SubResource("status").
		Body(aPI).
		Do().
		Into(result)
	return
}

// Delete takes name of the aPI and deletes it. Returns an error if one occurs.
func (c *apis) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("apis").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *apis) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("apis").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched aPI.
func (c *apis) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.API, err error) {
	result = &v1alpha1.API{}
	err = c.client.Patch(pt).
		Resource("apis").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
