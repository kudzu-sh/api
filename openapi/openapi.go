// +build !ignore_autogenerated

// Copyright Â© 2018 the Kudzu contributors.
// Licensed under the Apache License, Version 2.0; see the NOTICE file.

// Code generated by openapi. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"kudzu.sh/api/kudzu/v1alpha1.API":            schema_kudzush_api_kudzu_v1alpha1_API(ref),
		"kudzu.sh/api/kudzu/v1alpha1.APIList":        schema_kudzush_api_kudzu_v1alpha1_APIList(ref),
		"kudzu.sh/api/kudzu/v1alpha1.APISpec":        schema_kudzush_api_kudzu_v1alpha1_APISpec(ref),
		"kudzu.sh/api/kudzu/v1alpha1.APIStatus":      schema_kudzush_api_kudzu_v1alpha1_APIStatus(ref),
		"kudzu.sh/api/kudzu/v1alpha1.ImageSpec":      schema_kudzush_api_kudzu_v1alpha1_ImageSpec(ref),
		"kudzu.sh/api/kudzu/v1alpha1.ImageStatus":    schema_kudzush_api_kudzu_v1alpha1_ImageStatus(ref),
		"kudzu.sh/api/kudzu/v1alpha1.ResourceStatus": schema_kudzush_api_kudzu_v1alpha1_ResourceStatus(ref),
		"kudzu.sh/api/kudzu/v1alpha1.SourceSpec":     schema_kudzush_api_kudzu_v1alpha1_SourceSpec(ref),
		"kudzu.sh/api/kudzu/v1alpha1.SourceStatus":   schema_kudzush_api_kudzu_v1alpha1_SourceStatus(ref),
	}
}

func schema_kudzush_api_kudzu_v1alpha1_API(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "API is a set of custom resource definitions from the same group and version.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kudzu.sh/api/kudzu/v1alpha1.APISpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kudzu.sh/api/kudzu/v1alpha1.APIStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kudzu.sh/api/kudzu/v1alpha1.APISpec", "kudzu.sh/api/kudzu/v1alpha1.APIStatus"},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_APIList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIList is a list of API resources.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of API items in this list.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("kudzu.sh/api/kudzu/v1alpha1.API"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kudzu.sh/api/kudzu/v1alpha1.API"},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_APISpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kudzu.sh/api/kudzu/v1alpha1.SourceSpec"),
						},
					},
				},
				Required: []string{"group", "version"},
			},
		},
		Dependencies: []string{
			"kudzu.sh/api/kudzu/v1alpha1.SourceSpec"},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_APIStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/knative/pkg/apis/duck/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"resourceCount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("kudzu.sh/api/kudzu/v1alpha1.ResourceStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/knative/pkg/apis/duck/v1alpha1.Condition", "kudzu.sh/api/kudzu/v1alpha1.ResourceStatus"},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSpec specifies a Docker image to install an API or Operator.",
				Properties: map[string]spec.Schema{
					"repository": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hash": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"repository"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_ImageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageStatus is the status of fetching a Docker image to install an API or Operator.",
				Properties: map[string]spec.Schema{
					"repository": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hash": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"repository", "tag", "hash"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_ResourceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "group", "version", "kind"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_SourceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceSpec specifies the source for an API or Operator.",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kudzu.sh/api/kudzu/v1alpha1.ImageSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kudzu.sh/api/kudzu/v1alpha1.ImageSpec"},
	}
}

func schema_kudzush_api_kudzu_v1alpha1_SourceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceStatus is the status of fetching the source for an API or Operator.",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kudzu.sh/api/kudzu/v1alpha1.ImageStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kudzu.sh/api/kudzu/v1alpha1.ImageStatus"},
	}
}
